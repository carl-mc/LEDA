% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/leda.R
\docType{class}
\name{LEDA}
\alias{LEDA}
\title{Linking Ethnic Data from Africa}
\description{
Provides an interface to link ethnic groups from 12 different datasets to each other
   and calculate lingustic distances between them.
}
\details{
The LEDA package contains a full pipeline to link 
   ethnic datasets from Africa. The main strength of LEDA
   consists in leveraging the structure of the language
   tree to provide a flexible link between any two ethnic 
   group that are linked to the tree. 
   
   The package allows lists of ethnic groups to be linked to each 
   other using three main linkage types: binary linking based 
   on the relations of sets of language nodes associated with
   two groups; binary linking based on lingustic distances; 
   and a full computation of dyadic linguistic distances.
   
    Usage of a LEDA object is structured around 
    \emph{lists of ethnic groups}. These lists of groups 
    stem from the original datasets that have been joined 
    to the language tree. Lists are structured by data source,
    country, year, or, in the case of survey data, survey rounds. 
    Via the language tree, any two lists of ethnic groups
    can be linked to each other. 
    
    For full information on the LEDA project and methodology,
    read the \href{https://github.com/carl-mc/LEDA/raw/master/docs/LEDA_paper.pdf}{paper}. 
    
   When using the LEDA package, please cite:
   MÃ¼ller-Crepon, Carl, Yannick Pengl, and Nils-Christian Bormann (2020). 
   \emph{Linking Ethnic Data from Africa}. Unpublished working paper.
}
\section{Usage}{

\preformatted{
# Initialize
leda.obj <- LEDA$new()

# Apply any LEDA method
# leda.obj$method() ## not run.
}
}

\examples{

# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT

## Based on set relation
setlink <- leda.obj$link_set(
  lists.a = list(type = c("Afrobarometer"), 
  iso3c = "UGA"), 
  lists.b = list(type = c("FRT"),iso3c = "UGA"), 
  link.level = "dialect",   by.country = TRUE, 
  drop.b.threshold = 0, drop.ethno.id = TRUE)
head(setlink[,c("a.group","b.group")])

## Nearest linguistic neighbor
mindistlink <- leda.obj$link_minlingdist(
 lists.a = list(type = c("Afrobarometer"), iso3c = "UGA"), 
 lists.b = list(type = c("FRT"),  iso3c = "UGA"),
 level = "dialect",
 by.country = TRUE, expand = FALSE,  delta = .5,
 agg_fun.a = mean, agg_fun.b = min)
head(mindistlink[,c("a.group","b.group")])

## Within maximum linguistic distance
withindistlink <- leda.obj$link_withinlingdist(
  lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"), 
  lists.b = list(type = c("FRT"), iso3c = "UGA"),
  level = "dialect",
  max.distance = .1, by.country = TRUE,
  delta = .5, expand = FALSE, 
  agg_fun.a = mean, agg_fun.b = min)
head(withindistlink[,c("a.group","b.group")])

## Compute pairwise linguistic distance
distance.df <- leda.obj$ling_distance(
   lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"),
   lists.b = list(type = c("FRT"), iso3c = "UGA"),
   level = "dialect",
   by.country = TRUE, delta = .5, 
   expand = FALSE,  
   agg_fun.a = mean, agg_fun.b = min)
head(distance.df[,c("a.group","b.group")])

## ------------------------------------------------
## Method `LEDA$new`
## ------------------------------------------------

library(LEDA)
leda.obj <- LEDA$new()


## ------------------------------------------------
## Method `LEDA$show_list_parameters`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$show_list_parameters()

## ------------------------------------------------
## Method `LEDA$get_list_dict`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list dictionaries
list.dict <- leda$get_list_dict()
head(list.dict)

## ------------------------------------------------
## Method `LEDA$get_list_dict_subset`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list data for Afrobarometers in Uganda
leda$get_list_dict_subset(param_list = 
     list(type = "Afrobarometer", iso3c = c("UGA","KEN")))

## ------------------------------------------------
## Method `LEDA$get_list_ids`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list IDs for Afrobarometers in Uganda
leda$get_list_ids(param_list = 
   list(type = "Afrobarometer", iso3c = c("UGA","KEN")))

## ------------------------------------------------
## Method `LEDA$link_set`
## ------------------------------------------------

# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
setlink <- leda.obj$link_set(lists.a = list(type = "Afrobarometer", 
                                          iso3c = c("UGA","KEN")),
                           lists.b = list(type = "FRT", 
                                          iso3c = c("UGA","KEN")), 
                           link.level = "dialect",  
                           by.country = TRUE, 
                           drop.a.threshold = 0, 
                           drop.b.threshold = 0, 
                           drop.ethno.id = TRUE, 
                           add_listmetadata = TRUE)
head(setlink)

## ------------------------------------------------
## Method `LEDA$ling_distance`
## ------------------------------------------------

# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
ling.distance <- leda.obj$ling_distance(
   lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"),
   lists.b = list(type = c("FRT"), iso3c = "UGA"),
   level = "dialect",
   by.country = TRUE, delta = .5, 
   expand = FALSE,  
   agg_fun.a = mean, agg_fun.b = min)
head(ling.distance)

## ------------------------------------------------
## Method `LEDA$link_withinlingdist`
## ------------------------------------------------

# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
link.withindist <- leda.obj$link_withinlingdist(
  lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"), 
  lists.b = list(type = c("FRT"), iso3c = "UGA"),
  level = "dialect",
  max.distance = .1, by.country = TRUE,
  delta = .5, expand = FALSE, 
  agg_fun.a = mean, agg_fun.b = min)
head(link.withindist)

## ------------------------------------------------
## Method `LEDA$link_minlingdist`
## ------------------------------------------------

# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
link.mindist <- leda.obj$link_minlingdist(
 lists.a = list(type = c("Afrobarometer"), iso3c = "UGA"), 
 lists.b = list(type = c("FRT"),  iso3c = "UGA"),
 level = "dialect",
 by.country = TRUE, expand = FALSE,  delta = .5,
 agg_fun.a = mean, agg_fun.b = min)
 
head(link.mindist)

## ------------------------------------------------
## Method `LEDA$get_raw_ethnolinks`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$get_raw_ethnolinks(param_list = 
   list(type = "Afrobarometer", iso3c = "UGA"))

## ------------------------------------------------
## Method `LEDA$get_types`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$get_types()

## ------------------------------------------------
## Method `LEDA$prepare_newlink_table`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Make or load some dataset of ethnic groups
new.groups.df <- data.frame(group_name = 
  c("Asante", "Grusi", "Akan"),iso3c = c("GHA"),
  type = "My Survey in Ghana",
  marker = "ethnic group",
  stringsAsFactors = FALSE)


# Prepare a new link table 
newlink.df <- leda$prepare_newlink_table(
  group.df = new.groups.df, 
  groupvar = "group_name",
  by.country = TRUE, 
  return = TRUE, save.path =  NULL, 
  overwrite = TRUE, prev_link_param_list = NULL,
  levenshtein.threshold = .2,
  levenshtein.costs = 
  c(insertions = 1,deletions = 1, substitutions = 1))



## ------------------------------------------------
## Method `LEDA$add_tree_links`
## ------------------------------------------------

# Initialize linkage object
leda <- LEDA$new()

# Make toy link dataset
new.groups.df <- data.frame(
   group = c("Asante", "Mossi"), ## Ethnic group names
   link = c("Asante [dial]","Moore [org]"), ## Language nodes
   marker = "Ethnic self identification",
   iso3c = c("GHA", "BFA"), ## Countries
   stringsAsFactors = FALSE ## Everything as character
   )

# Add to LEDA
leda$add_tree_links(tree.link.df = new.groups.df, 
       idvars = c("iso3c", "type", "marker"),
       type = "My data")
       
# Use the new link
setlink <- leda$link_set(lists.a = list(type = c("My data")), 
    lists.b = list(type = c("Afrobarometer"), 
    round = 4, marker = "language",
    iso3c = c("GHA","BFA")), 
    link.level = 15, by.country = FALSE, 
    drop.b.threshold = 0, drop.ethno.id = TRUE)
    
head(setlink[, c("a.group", "b.group", "a.type", "b.type", "a.list.id", "b.list.id")])
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LEDA$new()}}
\item \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}
\item \href{#method-get_list_dict}{\code{LEDA$get_list_dict()}}
\item \href{#method-get_list_dict_subset}{\code{LEDA$get_list_dict_subset()}}
\item \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}
\item \href{#method-link_set}{\code{LEDA$link_set()}}
\item \href{#method-ling_distance}{\code{LEDA$ling_distance()}}
\item \href{#method-link_withinlingdist}{\code{LEDA$link_withinlingdist()}}
\item \href{#method-link_minlingdist}{\code{LEDA$link_minlingdist()}}
\item \href{#method-get_raw_ethnolinks}{\code{LEDA$get_raw_ethnolinks()}}
\item \href{#method-get_types}{\code{LEDA$get_types()}}
\item \href{#method-prepare_newlink_table}{\code{LEDA$prepare_newlink_table()}}
\item \href{#method-add_tree_links}{\code{LEDA$add_tree_links()}}
\item \href{#method-clone}{\code{LEDA$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new LEDA object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$new()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(LEDA)
leda.obj <- LEDA$new()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show_list_parameters"></a>}}
\if{latex}{\out{\hypertarget{method-show_list_parameters}{}}}
\subsection{Method \code{show_list_parameters()}}{
Returns a vector with the variables that define
   lists of ethnic groups in different datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$show_list_parameters()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The variables coded are the following:
    
    \code{cowcode}: Correlates of War code of country
    
    \code{iso3c}: 3-letter isocode of country
    
    \code{type}: Type of ethnic group dataset. 
    One of: \code{c("AMAR", "DHS", "SIDE", "EPR", "Fearon", "FRT", 
    "GREG", "Murdock_Map", "IPUMS", "Afrobarometer", "WLMS", "PREG")}
    
    \code{marker}: Ethnic marker used in list. 
    \code{"ethnic group"}: Ethnic group / ethnicity.
    \code{"language"}: Language.     
    \code{"mtongue"}: Mother tongue.
    
    \code{groupvar} Variable name of ethnic group identifier 
    in original dataset.
    
    \code{round}: Round of survey (DHS; SIDE; Afrobarometer)
    
    \code{subround}: Subround of survey (DHS; SIDE)
    
    \code{year}: Year (EPR; IPUMS)
    
    \code{list.id}: ID of list of ethnic groups.
}

\subsection{Returns}{
A vector.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$show_list_parameters()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_list_dict"></a>}}
\if{latex}{\out{\hypertarget{method-get_list_dict}{}}}
\subsection{Method \code{get_list_dict()}}{
Returns the full dictionary of lists of ethnic groups that
   are included in the LEDA project. An example of a list is the 
   IPUMS census data from Ghana in 2000.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$get_list_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A DataFrame.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list dictionaries
list.dict <- leda$get_list_dict()
head(list.dict)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_list_dict_subset"></a>}}
\if{latex}{\out{\hypertarget{method-get_list_dict_subset}{}}}
\subsection{Method \code{get_list_dict_subset()}}{
Returns a subset of the dictionary of lists of ethnic groups that
   are included in the LEDA project. An example of a list is the 
   IPUMS census data from Ghana in 2000.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$get_list_dict_subset(param_list = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_list}}{List of parameter values to subset list dictionary. 
The following fields are allowed: 

\code{cowcode}: Correlates of War code of country

\code{iso3c}: 3-letter isocode of country

\code{type}: Type of ethnic group dataset. 
One of: \code{c("AMAR", "DHS", "SIDE", "EPR", "Fearon", "FRT", 
"GREG", "Murdock_Map", "IPUMS", "Afrobarometer", "WLMS", "PREG")}

\code{marker}: Ethnic marker used in list. 
\code{"ethnic group"}: Ethnic group / ethnicity.
\code{"language"}: Language.     
\code{"mtongue"}: Mother tongue.

\code{groupvar} Variable name of ethnic group identifier 
in original dataset.

\code{round}: Round of survey (DHS; SIDE; Afrobarometer)

\code{subround}: Subround of survey (DHS; SIDE)

\code{year}: Year (EPR; IPUMS)

\code{list.id}: ID of list of ethnic groups.

These are parameters are also returned by method 
\href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A DataFrame.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list data for Afrobarometers in Uganda
leda$get_list_dict_subset(param_list = 
     list(type = "Afrobarometer", iso3c = c("UGA","KEN")))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_list_ids"></a>}}
\if{latex}{\out{\hypertarget{method-get_list_ids}{}}}
\subsection{Method \code{get_list_ids()}}{
Returns the a subset of the IDs of lists of ethnic groups that
   are included in the LEDA project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$get_list_ids(param_list = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_list}}{List of parameter values to subset IDs from list dictionary. 
The following fields are allowed: 

\code{cowcode}: Correlates of War code of country

\code{iso3c}: 3-letter isocode of country

\code{type}: Type of ethnic group dataset. 
One of: \code{c("AMAR", "DHS", "SIDE", "EPR", "Fearon", "FRT", 
"GREG", "Murdock_Map", "IPUMS", "Afrobarometer", "WLMS", "PREG")}

\code{marker}: Ethnic marker used in list. 
\code{"ethnic group"}: Ethnic group / ethnicity.
\code{"language"}: Language.     
\code{"mtongue"}: Mother tongue.

\code{groupvar} Variable name of ethnic group identifier 
in original dataset.

\code{round}: Round of survey (DHS; SIDE; Afrobarometer)

\code{subround}: Subround of survey (DHS; SIDE)

\code{year}: Year (EPR; IPUMS)

\code{list.id}: ID of list of ethnic groups.

These are parameters are also returned by method 
\href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A vector of list.ids
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list IDs for Afrobarometers in Uganda
leda$get_list_ids(param_list = 
   list(type = "Afrobarometer", iso3c = c("UGA","KEN")))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-link_set"></a>}}
\if{latex}{\out{\hypertarget{method-link_set}{}}}
\subsection{Method \code{link_set()}}{
Returns a link table of ethnic groups contained in lists \emph{A} and \emph{B},
  based on their set relation. At the baseline, groups \emph{a} to \emph{b} are linked to each other
  as soon as they share any language node at the level of the language tree specified by \code{link_level}. 
  Links are provided between all lists in \emph{A} with every list in \emph{B} separately.
     
  The returned DataFrame contains at least one row per group \emph{a} 
  that has been linked to the ethnologue language tree. 
  If \emph{a} is not linked to any group \emph{b},
  the columns that contains linked groups \emph{b} are 
  set to missing. The returned DataFrame contains multiple 
  rows per group \emph{a} if \emph{a} is linked to multiple groups \emph{b}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$link_set(
  lists.a,
  lists.b,
  link.level,
  by.country = T,
  drop.a.threshold = 0,
  drop.b.threshold = 0,
  drop.ethno.id = T,
  add_listmetadata = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lists.a}}{Vector of lists \emph{A}, identified via their 
list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.
Or a list of parameters that specify lists \emph{A}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{lists.b}}{Vector of lists \emph{B}, identified via their 
list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.
Or a list of parameters that specify lists \emph{B}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{link.level}}{Level on the linguistic tree on 
which ethnic groups are linked to each other. 
Must be one of: \code{1:16},
or \code{'language'}, or \code{'dialect'}. \code{'language'} 
corresponds to level 15, 
or \code{'dialect'} corresponds to level 16.}

\item{\code{by.country}}{Flag for linking lists only within 
the same country (\code{by.country = TRUE}), 
or also across countries (\code{by.country = FALSE}).
Defaults to \code{TRUE} to avoid accidental 
computation of a huge number of links.}

\item{\code{drop.a.threshold}}{Maximum share of language nodes 
 associated with \emph{a} that have to be 
associated with group \emph{b} for a link to be dropped.}

\item{\code{drop.b.threshold}}{Maximum share of language nodes 
 associated with \emph{b} that have to be 
associated with group \emph{a} for a link to be dropped.}

\item{\code{drop.ethno.id}}{Drop all ethnologue language IDs 
 that are used to link group \emph{a} with \emph{b}. If
\code{FALSE}, the returned DataFrame has as many rows 
per link between \emph{a} and \emph{b} as there are 
language nodes the two groups share.}

\item{\code{add_listmetadata}}{Adds metadate of lists 
\emph{A} and \emph{B} to the output. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A DataFrame. Columns include the names and identifiers of 
  groups \emph{a} and \emph{b} and the \code{link.level} used for the 
  link. If \code{expand = TRUE}, the column \code{ethno.id} stores 
  the ID of each Ethnologue node used for a link. Columns
  \code{ei.frac.a}  and \code{ei.frac.b} store the fraction of language
  nodes of \emph{a} and \emph{b} covered by a link. 
  \code{ei.frac.alla} containes the fraction of nodes of \emph{a} covered by all
  groups \emph{b} linked to \emph{a}. \code{ei.frac.allb} contains the 
  fraction of the nodes of all groups \emph{b} covered the nodes of \emph{a}. 
  This information can be used to further finetune a link.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
setlink <- leda.obj$link_set(lists.a = list(type = "Afrobarometer", 
                                          iso3c = c("UGA","KEN")),
                           lists.b = list(type = "FRT", 
                                          iso3c = c("UGA","KEN")), 
                           link.level = "dialect",  
                           by.country = TRUE, 
                           drop.a.threshold = 0, 
                           drop.b.threshold = 0, 
                           drop.ethno.id = TRUE, 
                           add_listmetadata = TRUE)
head(setlink)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ling_distance"></a>}}
\if{latex}{\out{\hypertarget{method-ling_distance}{}}}
\subsection{Method \code{ling_distance()}}{
Returns a table of linguistic distances between all ethnic groups 
  contained in lists \emph{A} and \emph{B}. The 
  linguistic distance between two languages \eqn{L_1} and \eqn{L_2}
  is computed as
  
  \deqn{ 1 - ((d(L_1,R) + d(L_2,R) - d(L_1,L_2)) / (d(L_1,R) + d(L_2,R)))^{\delta} }
  
  where \eqn{d(L_i,R)} is the length of path from a
  language to the tree's origin and 
  \eqn{d(L_1,L_2)} is the length of 
  the shortest path from the first to the second 
  language. \eqn{\delta} is an exponent to discount 
  short distances on the tree. 
  
  Because we oftentimes link ethnic groups 
  \emph{a} and \emph{b} to several languages, we have to aggregate 
  the resulting distance matrix, for example by taking the minimum 
  distance between all languages \eqn{L_a} in group \eqn{a} to 
  all languages \eqn{L_b} associated with group \eqn{b}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$ling_distance(
  lists.a,
  lists.b,
  by.country = T,
  delta = 0.5,
  expand = TRUE,
  level = c("dialect", "language"),
  agg_fun.a = min,
  agg_fun.b = min,
  add_listmetadata = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lists.a}}{Vector of lists \emph{A}, identified via their 
list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.
Or a list of parameters that specify lists \emph{A}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{lists.b}}{Vector of lists \emph{B}, identified via
their list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.
Or a list of parameters that specify lists \emph{B}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{by.country}}{Flag for computing distances
only between groups in the   
same country (\code{by.country = TRUE}), 
or also across countries (\code{by.country = FALSE}). 
Defaults to \code{TRUE} to avoid accidental 
computation of a huge number of distances.}

\item{\code{delta}}{Delta parameter used to discount 
short distances on the language tree. 
See \href{#method-ling_distance}{\code{LEDA$ling_distance()}}. for details.}

\item{\code{expand}}{Expand the language tree so that all 
languages are located on level 15 or not. 
If \code{FALSE} languages are located on their 
original position in the linguistic tree, 
which can be considerably closer to the root of 
the tree. Defaults to \code{FALSE} for 
reasons explained in the paper.}

\item{\code{level}}{Level on the linguistic tree from
which distances are computed. 
Must be \code{'language'} or \code{'dialect'}. 
\code{'language'} corresponds to level 15, 
or \code{'dialect'} corresponds to level 16.}

\item{\code{agg_fun.a}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{a} to group \emph{b} 
in the (common) cases where \emph{a} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{agg_fun.b}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{b} to each node
associated with group \emph{a}. 
in the (common) cases where \emph{b} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{add_listmetadata}}{Adds metadate of lists 
\emph{A} and \emph{B} to the output. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A DataFrame. Columns include the names and identifiers of 
  groups \emph{a} and \emph{b}. Column \code{distance} stores
  the linguistic distance between groups \emph{a} and \emph{b}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
ling.distance <- leda.obj$ling_distance(
   lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"),
   lists.b = list(type = c("FRT"), iso3c = "UGA"),
   level = "dialect",
   by.country = TRUE, delta = .5, 
   expand = FALSE,  
   agg_fun.a = mean, agg_fun.b = min)
head(ling.distance)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-link_withinlingdist"></a>}}
\if{latex}{\out{\hypertarget{method-link_withinlingdist}{}}}
\subsection{Method \code{link_withinlingdist()}}{
Returns a link table of ethnic groups contained in lists \emph{A} and \emph{B}. 
  Each for each list of ethnic groups in \emph{A} and \emph{B}, each group \emph{a} is linked to 
  all groups \emph{b} within a linguistic distance specified by \code{max.distance}. 
  Note that group \emph{a} can be therefore linked to several groups \emph{b}. 
  Links are provided between all lists in \emph{A} with every list in \emph{B} separately.
  
  The returned DataFrame contains at least one row per group \emph{a} 
  that has been linked to the ethnologue language tree. 
  If \emph{a} is not linked to any group \emph{b},
  the columns that contains linked groups \emph{b} are 
  set to missing. The returned DataFrame contains multiple 
  rows per group \emph{a} if \emph{a} is linked to multiple groups \emph{b}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$link_withinlingdist(
  lists.a,
  lists.b,
  max.distance,
  by.country = T,
  level = c("dialect", "language"),
  delta = 0.5,
  expand = FALSE,
  agg_fun.a = min,
  agg_fun.b = min,
  add_listmetadata = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lists.a}}{Vector of lists \emph{A}, identified via their 
list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.. 
Or a list of parameters that specify lists \emph{A}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{lists.b}}{Vector of lists \emph{B}, identified via
their list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.. 
Or a list of parameters that specify lists \emph{B}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}..}

\item{\code{max.distance}}{Maximum linguistic distance. 
All pairs of groups \emph{a} and \emph{b} with a
distance smaller or equal \code{max.distance}
are linked to each other.}

\item{\code{by.country}}{Flag for linking lists only within
the same country (\code{by.country = TRUE}), 
or also across countries (\code{by.country = FALSE}). 
Defaults to \code{TRUE} to avoid accidental 
computation of a huge number of links.}

\item{\code{level}}{Level on the linguistic tree from
which distances are computed. 
Must be \code{'language'} or \code{'dialect'}. 
\code{'language'} corresponds to level 15, 
or \code{'dialect'} corresponds to level 16.}

\item{\code{delta}}{Delta parameter used to discount 
short distances on the language tree. 
Affect the links returned. 
See \href{#method-ling_distance}{\code{LEDA$ling_distance()}}. for details.}

\item{\code{expand}}{Expand the language tree so that all 
languages are located on level 15 or not. 
If \code{FALSE} languages are located on their 
original position in the linguistic tree, 
which can be considerably closer to the root of 
the tree. Defaults to \code{FALSE} for 
reasons explained in the paper.}

\item{\code{agg_fun.a}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{a} to group \emph{b} 
in the (common) cases where \emph{a} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{agg_fun.b}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{b} to each node
associated with group \emph{a}. 
in the (common) cases where \emph{b} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{add_listmetadata}}{Adds metadate of lists 
\emph{A} and \emph{B} to the output. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A DataFrame. Columns include the names and identifiers of 
  groups \emph{a} and \emph{b}. Column \code{distance} stores
  the linguistic distance between groups \emph{a} and \emph{b}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
link.withindist <- leda.obj$link_withinlingdist(
  lists.a = list(type = c("Afrobarometer"),  iso3c = "UGA"), 
  lists.b = list(type = c("FRT"), iso3c = "UGA"),
  level = "dialect",
  max.distance = .1, by.country = TRUE,
  delta = .5, expand = FALSE, 
  agg_fun.a = mean, agg_fun.b = min)
head(link.withindist)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-link_minlingdist"></a>}}
\if{latex}{\out{\hypertarget{method-link_minlingdist}{}}}
\subsection{Method \code{link_minlingdist()}}{
Returns a link table of ethnic groups contained in lists \emph{A} and \emph{B}. 
  Each for each list of ethnic groups in \emph{A} and \emph{B}, each group \emph{a} is linked to its closest 
  linguistic neighbour \emph{b}. Note that group \emph{a} can be linked to several groups \emph{b} if they are
  equidistant to \emph{a}. 
  Links are provided between all lists in \emph{A} with every list in \emph{B} separately.
  
  The returned DataFrame contains at least one row per group \emph{a} 
  that has been linked to the ethnologue language tree. 
  If \emph{a} is not linked to any group \emph{b},
  the columns that contains linked groups \emph{b} are 
  set to missing. The returned DataFrame contains multiple 
  rows per group \emph{a} if \emph{a} is linked to multiple groups \emph{b}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$link_minlingdist(
  lists.a,
  lists.b,
  level = c("dialect", "language"),
  by.country = T,
  expand = FALSE,
  delta = 0.5,
  agg_fun.a = min,
  agg_fun.b = min,
  add_listmetadata = T
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lists.a}}{Vector of lists \emph{A}, identified via their 
list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.. 
Or a list of parameters that specify lists \emph{A}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}.}

\item{\code{lists.b}}{Vector of lists \emph{B}, identified via
their list.id returned by method \href{#method-get_list_ids}{\code{LEDA$get_list_ids()}}.. 
Or a list of parameters that specify lists \emph{B}. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}.}

\item{\code{level}}{Level on the linguistic tree from
which distances are computed. 
Must be \code{'language'} or \code{'dialect'}. 
\code{'language'} corresponds to level 15, 
or \code{'dialect'} corresponds to level 16.}

\item{\code{by.country}}{Flag for linking lists only within
the same country (\code{by.country = TRUE}), 
or also across countries (\code{by.country = FALSE}). 
Defaults to \code{TRUE} to avoid accidental 
computation of a huge number of links.}

\item{\code{expand}}{Expand the language tree so that all 
languages are located on level 15 or not. 
If \code{FALSE} languages are located on their 
original position in the linguistic tree, 
which can be considerably closer to the root of 
the tree. Defaults to \code{FALSE} for 
reasons explained in the paper.}

\item{\code{delta}}{Delta parameter used to discount 
short distances on the language tree. 
Does not affect the links, only the absolute
linguistic distance associated with them 
(but not their rank).
See \href{#method-ling_distance}{\code{LEDA$ling_distance()}}. for details.}

\item{\code{agg_fun.a}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{a} to group \emph{b} 
in the (common) cases where \emph{a} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{agg_fun.b}}{Function used aggregate linguistic distances 
across the nodes associated with group \emph{b} to each node
associated with group \emph{a}. 
in the (common) cases where \emph{b} is associated with multiple
language nodes. Defaults to \code{min}.}

\item{\code{add_listmetadata}}{Adds metadate of lists 
\emph{A} and \emph{B} to the output. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A DataFrame. Columns include the names and identifiers of 
  groups \emph{a} and \emph{b}. Column \code{distance} stores
  the linguistic distance between groups \emph{a} and \emph{b}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda.obj <- LEDA$new()

# link Afrobarometer to FRT
link.mindist <- leda.obj$link_minlingdist(
 lists.a = list(type = c("Afrobarometer"), iso3c = "UGA"), 
 lists.b = list(type = c("FRT"),  iso3c = "UGA"),
 level = "dialect",
 by.country = TRUE, expand = FALSE,  delta = .5,
 agg_fun.a = mean, agg_fun.b = min)
 
head(link.mindist)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_raw_ethnolinks"></a>}}
\if{latex}{\out{\hypertarget{method-get_raw_ethnolinks}{}}}
\subsection{Method \code{get_raw_ethnolinks()}}{
Retrieve the raw coding of links 
   between ethnic groups
   contained in group lists specified by \code{param_list} 
   to the language tree.  The function returns the raw data
   the LEDA object is based upon.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$get_raw_ethnolinks(param_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_list}}{List of parameter values to subset lists of 
ethnic groups.  
The following fields are allowed: 

\code{cowcode}: Correlates of War code of country

\code{iso3c}: 3-letter isocode of country

\code{type}: Type of ethnic group dataset. 
One of: \code{c("AMAR", "DHS", "SIDE", "EPR", "Fearon", "FRT", 
"GREG", "Murdock_Map", "IPUMS", "Afrobarometer", "WLMS", "PREG")}

\code{marker}: Ethnic marker used in list. 
\code{"ethnic group"}: Ethnic group / ethnicity.
\code{"language"}: Language.     
\code{"mtongue"}: Mother tongue.

\code{groupvar} Variable name of ethnic group identifier 
in original dataset.

\code{round}: Round of survey (DHS; SIDE; Afrobarometer)

\code{subround}: Subround of survey (DHS; SIDE)

\code{year}: Year (EPR; IPUMS)

\code{list.id}: ID of list of ethnic groups.

These are parameters are also returned by method 
\href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$get_raw_ethnolinks(param_list = 
   list(type = "Afrobarometer", iso3c = "UGA"))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_types"></a>}}
\if{latex}{\out{\hypertarget{method-get_types}{}}}
\subsection{Method \code{get_types()}}{
Get types of group lists in LEDA object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$get_types()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Get list parameters
leda$get_types()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prepare_newlink_table"></a>}}
\if{latex}{\out{\hypertarget{method-prepare_newlink_table}{}}}
\subsection{Method \code{prepare_newlink_table()}}{
Based on an input of ethnic group
  names, the function returns a link table between 
  the groups and automatically found likely matches
  on the language tree. These non-authorative 
  'suggestions' are 
  identified via a fuzzy string match of input
  group names with (1) the names of nodes on the 
  langauge tree, including dialects and alternative
  names, as well as (2) the names of groups that
  have been previously linked to the tree as
  contained in the respective LEDA object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$prepare_newlink_table(
  group.df,
  groupvar,
  by.country = FALSE,
  return = TRUE,
  save.path = NULL,
  overwrite = FALSE,
  prev_link_param_list = NULL,
  levenshtein.threshold = 0.2,
  levenshtein.costs = c(insertions = 1, deletions = 1, substitutions = 1)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{group.df}}{A \code{DataFrame} that contains the
names of ethnic groups to be linked to the language
tree, as well as any other (meta)data whished to retain.}

\item{\code{groupvar}}{String containing the name of the 
column in \code{group.df} that contains the 
names of ethnic groups.}

\item{\code{by.country}}{Logical determining whether ethnic groups
names should be string matched separately within and outside the
country they belong. Setting the parameter \code{TRUE}
leads to more plausible matches, but requires a
column \code{iso3c} in \code{group.df}. Column \code{iso3c}
has to contain valid 3-letter iso codes of African 
countries. See e.g. the R-package \code{countrycode}.}

\item{\code{return}}{Logical determining whether the reulting 
link table shall be returned.}

\item{\code{save.path}}{String of the path to which the reulting
link table is stored, as a .csv file. If \code{NULL} (the default),
nothing is stored.}

\item{\code{overwrite}}{Logical determining whether a previously
existing file located by \code{save.path} is overwritten.}

\item{\code{prev_link_param_list}}{Parameters that determine the 
subset of previous links between ethnic group lists and
the language tree to automatically retrieve link suggestions from. 
If \code{NULL} (the default), all available lists are used. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}. for details.}

\item{\code{levenshtein.threshold}}{Threshold Levenshtein string 
distance below which a fuzzy string match is returned.}

\item{\code{levenshtein.costs}}{Vector of costs used to compute 
Levenshtein string distance. See \code{utils::adist} for details.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The automatic links should not be regarded as authorative,
  but merely as a help to facilitate the coding, 
  which proceeds outside the LEDA environment from
  this point onwards. The final table returned by the
  function has a column called \code{link}, which is 
  to be filled by the user, using the automatically 
  generated suggestions
  and secondary data sources. Once this coding is completed,
  the table can be added to the LEDA object with the method
  \href{#method-get_tree_links}{\code{LEDA$add_tree_links()}}..
}

\subsection{Returns}{
A \code{DataFrame} of the same height as \code{group.df}.
  In addition to the columns of \code{group.df}, 
  it contains the following columns:
  
  \code{auto_link_org}: Language tree nodes 
    (levels 1:14; languages, i.e. level 15) 
    matched via their original (org) name. 
  
  \code{auto_link_alt}: Languages (level 15) matched
    via their alternative name.
  
  \code{auto_link_dial}: Dialects matched via their
    name or alternative name. 
  
  \code{auto_link_prev}: Language tree nodes 
    found via a fuzzy string match of input groups
    to the groups previously linked to the language 
    tree (potentially subsetted by \code{prev_link_param_list}).
  
  \code{auto_link_foreign}: If \code{by.country}, 
    same four fields as above for langauges from
    'foreign' countries, but pasted into one
    single string. 
  
  \code{link} Empty column for the final link, 
    to be filled by the user.
    
  \code{comment} Empty column for comments on the final link, 
    to be filled by the user.
    
  \code{source} Empty column for the source of the final link, 
    to be filled by the user.
    
  
  Multiple matches are combined by pasting the languague names
  separated by a '|'. The matched language nodes' tree level 
  is indicated behind its name in '[]', with L1:L14 denoting 
  super-language levels, 'lang' denoting languages, and 'dial'
  denoting dialects. This coding format should be maintained 
  when filling the column \code{link} with the final link of groups
  to the language tree.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Make or load some dataset of ethnic groups
new.groups.df <- data.frame(group_name = 
  c("Asante", "Grusi", "Akan"),iso3c = c("GHA"),
  type = "My Survey in Ghana",
  marker = "ethnic group",
  stringsAsFactors = FALSE)


# Prepare a new link table 
newlink.df <- leda$prepare_newlink_table(
  group.df = new.groups.df, 
  groupvar = "group_name",
  by.country = TRUE, 
  return = TRUE, save.path =  NULL, 
  overwrite = TRUE, prev_link_param_list = NULL,
  levenshtein.threshold = .2,
  levenshtein.costs = 
  c(insertions = 1,deletions = 1, substitutions = 1))


}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_tree_links"></a>}}
\if{latex}{\out{\hypertarget{method-add_tree_links}{}}}
\subsection{Method \code{add_tree_links()}}{
Function to add a table that links a list of ethnic groups 
  with nodes on the language tree to the LEDA object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$add_tree_links(tree.link.df, idvars, type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tree.link.df}}{Table that contains te links between ethnic groups and 
 the langauge tree. It must contain the following variables:
 
 \code{group} Names of ethnic groups, of type "character". 
 
 \code{link} Names of language nodes linked to ethnic 
   group, of type "character". Multiple nodes linked to the 
   same ethnic group must be separated by a '|'. Names
   of language nodes must be contained in the Ethnologue 
   database 13. A node's level is specified in [], the node must 
   exist on that level. Level specifiers follow this form: L1:L14 denoting 
   super-language levels, 'lang' denoting languages, 'dial'
   denoting dialects, and iso denoting language ISO-codes. 
   E.g. "Akan [L9]", "Asante [dial]", or "aka [iso]". If no level 
   is specified and multiple langauge tree nodes share the same name,
   the one closest to the node is chosen. 
   Note that the safest way to avoid confusion is to provide iso-codes.
   
\code{iso3c} (not required) Country identifier as 3-letter ISO code. 
   If provided, the algorithm gives preference to nodes of the
   language tree in the same country in cases where multiple nodes
   share the same name given by \code{link}. 
   
\code{idvars} Additional variables that identify lists of ethnic groups in your
   data. See below.}

\item{\code{idvars}}{Variables that identify lists of ethnic groups in your
data. These should contain a list \code{type} (e.g. "My survey"),
and be typically nested within countries and years. 
See \href{#method-show_list_parameters}{\code{LEDA$show_list_parameters()}}. for the variables that 
identify ethnic group lists in the LEDA dataset. 

The unique combinations of \code{idvars} values in \code{group.df}
are used to create new entries in the LEDA object's dictionary of 
group lists \code{leda.obj$list.dict}.}

\item{\code{type}}{String that contains the 'type' of the group list to add,
for example 'My survey'. Must not be one of the types already 
in the LEDA project.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The function links the input ethnic groups to the linguistic tree 
  contained in the package and thereby updates the LEDA object. 
  Once this has been done, the added group can be linked to all 
  ethnic group lists contained in the LEDA object. See examples below.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize linkage object
leda <- LEDA$new()

# Make toy link dataset
new.groups.df <- data.frame(
   group = c("Asante", "Mossi"), ## Ethnic group names
   link = c("Asante [dial]","Moore [org]"), ## Language nodes
   marker = "Ethnic self identification",
   iso3c = c("GHA", "BFA"), ## Countries
   stringsAsFactors = FALSE ## Everything as character
   )

# Add to LEDA
leda$add_tree_links(tree.link.df = new.groups.df, 
       idvars = c("iso3c", "type", "marker"),
       type = "My data")
       
# Use the new link
setlink <- leda$link_set(lists.a = list(type = c("My data")), 
    lists.b = list(type = c("Afrobarometer"), 
    round = 4, marker = "language",
    iso3c = c("GHA","BFA")), 
    link.level = 15, by.country = FALSE, 
    drop.b.threshold = 0, drop.ethno.id = TRUE)
    
head(setlink[, c("a.group", "b.group", "a.type", "b.type", "a.list.id", "b.list.id")])
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LEDA$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
